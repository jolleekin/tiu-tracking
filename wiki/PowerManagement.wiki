#labels Featured
= Power Management =

===1. Battery===

http://andrew.svp.co.uk/custom/images/products/CR2025_300.png

Using this battery from digikey (0.96" Diameter,3V-1000mAh)

http://search.digikey.com/scripts/DkSearch/dksus.dll?Detail&name=P126-ND

Assume:
  * transmission time: 100ms every 10s period
  * current 100mA (RF + uC)
  * ignore sleep current 

         _=> battery life = (1000mAh/100mA) / (100ms/10s) = 1000 hrs_

In general:
  * C = capacity `[`mAh`]`
  * I = active current `[`mA`]`
  * T = transmit ratio

        ||=> battery life (hours) = C/(I x T)||
{{{
    _ _                       _ _   
   |   | transmission time   |   |
 ->|   |<-                   |   |
_ _|   |_ _ _ _ _ _ _ _ _ _ _|   |_ _ _ _
       |<--- sleep time  --->|
   
}}}
We have this on the assumption that we _ignore the sleep current_. This is reasonable if RF modules and uC support sleep mode that leak current is only a couple of uA.

Example : 


||Pico Power ATtiny13A||HOPE RFM12 ||
||3.9-10 μA||0.3μA||

http://www.atmel.com/dyn/resources/prod_documents/doc8126_105.pdf

http://www.hoperf.com/upfile/RFM12.pdf

  
===2. Transmission time===
It is good to know the transmission time of the module so that we can calculate the active/sleep ratio. Also, transmission time place an important role in collision avoidance(the shorter transmission time, the smaller chance of collision).

Tested:

  * atmega328p + RFM12
  * baud rate 19200, 434MHz
  * source TX.pde version 2 with a small modification :
{{{
long t;

t = micros(); // get time stamp 
send();
t = micros() - t; // transmission time

Serial.println(t,DEC); // serial monitor

delay(10); // 'll be replaced with sleep mode later


}}}

Theoretically, at 19200 baud rate, no start/stop bit, we have 19200/8 = 2400 byte per second, or *416us/byte*.

Test Results:
||sent||transmission time||
||10 bytes||6220 us||
||20 bytes||10164 us||
||30 bytes||14108 us||
||40 bytes||18060 us||

=> *~400us/byte* , overhead ~2000us. This confirms the theory.

in conclusion: 
 ||transmission time = overhead + (number of transmitted byte x 8/baudrate)||

Now taking this result and applying to calculate battery life, e.g send 20 bytes will take about 10ms. Assuming 100mA active current, 10s of transmit interval:

 _=> battery life = 1000mAh /(100mA x 10ms/10s) = 10.000 hours_